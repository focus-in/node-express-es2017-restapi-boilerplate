Nodejs Express es6 framework

- uses Modular Architecture

config
  config.js - booter config class (which holds all the config variables)
  assets - project asset files wildcard path
  env - environment variables keys & default values
  lib -

lib - generic libraries used in modules



modules - all our modules lies here
  core - modules core architecture & functions

  user - User module
    configs - configuration
    routes - module routes
    controllers - module action controller
    helpers - module helper functions & middlewares stays here
    models - models & schema files
      schema



The method & property prefixed with _ act as private


// this.express.use(router);
//
//
//
//
//
//
// // enable jwt authentication
// app.use(passport.initialize());
// passport.use('jwt', jwtStrategy);
//
// // mount api v1 routes
// app.use('/v1', routes);
//
// // if error is not an instanceOf APIError, convert it.
// app.use(error.converter);
//
// // catch 404 and forward to error handler
// app.use(error.notFound);
//
// // error handler, send stacktrace only during development
// app.use(error.handler);
//
//
// /*
//
// // var _ = require('lodash'),
// //   config = require('../config'),
// //   chalk = require('chalk'),
// //   fs = require('fs'),
// //   winston = require('winston');
//
//
//
//
// // A stream object with a write function that will call the built-in winston
// // logger.info() function.
// // Useful for integrating with stream-related mechanism like Morgan's stream
// // option to log all HTTP requests to a file
// logger.stream = {
//   write: function (msg) {
//     logger.info(msg);
//   }
// };
//
// /**
//  * Instantiate a winston's File transport for disk file logging
//  *
//  */
// logger.setupFileLogger = function setupFileLogger() {
//
//   var fileLoggerTransport = this.getLogOptions();
//   if (!fileLoggerTransport) {
//     return false;
//   }
//
//   try {
//     // Check first if the configured path is writable and only then
//     // instantiate the file logging transport
//     if (fs.openSync(fileLoggerTransport.filename, 'a// ')) {
//       logger.add(winston.transports.File, fileLoggerTransport);
//     }
//
//     return true;
//   } catch (err) {
//     if (process.env.NODE_ENV !== 'test') {
//       console.log();
//       console.log(chalk.red('An error has occured during the creation of the File transport logger.'));
//       console.log(chalk.red(err));
//       console.log();
//     }
//
//     return false;
//   }
//
// };
//
// /**
//  * The options to use with winston logger
//  *
//  * Returns a Winston object for logging with the File transport
//  */
// logger.getLogOptions = function getLogOptions() {
//
//   var _config = _.clone(config, true);
//   var configFileLogger = _config.log.fileLogger;
//
//   if (!_.has(_config, 'log.fileLogger.directoryPath') || !_.has(_config, 'log.fileLogger.fileName')) {
//     console.log('unable to find logging file configuration');
//     return false;
//   }
//
//   var logPath = configFileLogger.directoryPath //  '/' //  configFileLogger.fileName;
//
//   return {
//     level: 'debug',
//     colorize: false,
//     filename: logPath,
//     timestamp: true,
//     maxsize: configFileLogger.maxsize ? configFileLogger.maxsize : 10485760,
//     maxFiles: configFileLogger.maxFiles ? configFileLogger.maxFiles : 2,
//     json: (_.has(configFileLogger, 'json')) ? configFileLogger.json : false,
//     eol: '\n',
//     tailable: true,
//     showLevel: true,
//     handleExceptions: true,
//     humanReadableUnhandledException: true
//   };
//
// };
//
// /**
//  * The options to use with morgan logger
//  *
//  * Returns a log.options object with a writable stream based on winston
//  * file logging transport (if available)
//  */
// logger.getMorganOptions = function getMorganOptions() {
//
//   return {
//     stream: logger.stream
//   };
//
// };
//
//
// // logger.setupFileLogger();
//
// // module.exports = logger;
